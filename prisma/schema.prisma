generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Business {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  rooms     Room[]
  users     User[]
}

model User {
  id                     String            @id @default(uuid())
  name                   String
  email                  String?           @unique
  agentId                String?           @unique
  role                   Role
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @default(now()) @updatedAt
  businessId             String
  business               Business          @relation(fields: [businessId], references: [id])

  // Socket logic
  agentManagement        AgentManagement?  @relation("AgentManagementAdmin")
  managedAgentManagement AgentManagement[] @relation("AgentManagementAgents")
  AgentPresence          AgentPresence?

  messages               Message[]         @relation("MessageSender")
  overrideRooms          Room[]            @relation("CurrentOverride")
  guestRooms             Room[]            @relation("RoomGuest")
  activeRooms            Room[]            @relation("ActiveAgents")
  taggedMessages         Message[]         @relation("TaggedAgents")

  // Extensions
  medicalContext         MedicalContext?
  guestVisitations       Visitation[]      @relation("GuestVisitations")
  agentVisitations       Visitation[]      @relation("AgentVisitations")
  remindersReceived      Reminder[]        @relation("GuestReminders")
  remindersSent          Reminder[]        @relation("AgentReminders")
}

model Room {
  id                String     @id @default(uuid())
  name              String?
  guestId           String?    @unique
  currentOverrideId String?
  status            RoomStatus @default(active)
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @default(now()) @updatedAt
  businessId        String
  business          Business   @relation(fields: [businessId], references: [id])

  guest             User?      @relation("RoomGuest", fields: [guestId], references: [id])
  currentOverride   User?      @relation("CurrentOverride", fields: [currentOverrideId], references: [id])
  activeAgents      User[]     @relation("ActiveAgents")

  messages          Message[]
  conversationMemory ConversationMemory[]
}

model Message {
  id           String     @id @default(uuid())
  roomId       String
  senderType   SenderType
  senderId     String?
  content      String
  contentType  String?
  timestamp    DateTime   @default(now())

  room         Room       @relation(fields: [roomId], references: [id])
  sender       User?      @relation("MessageSender", fields: [senderId], references: [id])
  taggedAgents User[]     @relation("TaggedAgents")

  fhirMessageId String?
  metadata      Json?
}

model AgentPresence {
  id       String   @id @default(uuid())
  agentId  String   @unique
  isOnline Boolean  @default(false)
  lastSeen DateTime @updatedAt
  agent    User     @relation(fields: [agentId], references: [agentId])
}

model AgentManagement {
  id        String   @id @default(uuid())
  adminId   String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  admin     User     @relation("AgentManagementAdmin", fields: [adminId], references: [id])
  agents    User[]   @relation("AgentManagementAgents")
}

model Notification {
  id          String               @id @default(uuid())
  title       String
  description String
  time        DateTime
  read        String[]
  roomId      String?
  priority    NotificationPriority
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
}

// ðŸ”¹ Medical Context Extension
model MedicalContext {
  id              String   @id @default(uuid())
  guestId         String   @unique
  guest           User     @relation(fields: [guestId], references: [id])

  pregnancyStatus String?
  gestationalAge  String?
  dueDate         String?
  highRisk        Boolean  @default(false)
  conditions      Json?
  medications     Json?
  allergies       Json?
  vitalSigns      Json?
  fhirPatientId   String?
  fhirReferences  Json?

  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now()) @updatedAt
}

// ðŸ”¹ Reminder Extension
model Reminder {
  id            String   @id @default(uuid())
  guestId       String
  agentId       String
  message       String
  scheduledTime DateTime
  sentTime      DateTime?
  status        ReminderStatus @default(pending)

  guest         User     @relation("GuestReminders", fields: [guestId], references: [id])
  agent         User     @relation("AgentReminders", fields: [agentId], references: [id])

  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt
}

// ðŸ”¹ Visitation Extension
model Visitation {
  id            String   @id @default(uuid())
  guestId       String
  agentId       String
  scheduledTime DateTime
  status        VisitationStatus @default(scheduled)
  notes         String?

  guest         User     @relation("GuestVisitations", fields: [guestId], references: [id])
  agent         User     @relation("AgentVisitations", fields: [agentId], references: [id])

  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt
}

// ðŸ”¹ AI Memory Extension
model ConversationMemory {
  id        String   @id @default(uuid())
  roomId    String
  key       String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  room      Room     @relation(fields: [roomId], references: [id])

  @@unique([roomId, key])
}

// ðŸ”¹ Enums
enum Role {
  guest
  agent
  admin
}

enum SenderType {
  ai
  agent
  guest
  system
}

enum RoomStatus {
  active
  closed
}

enum NotificationPriority {
  HIGH
  LOW
  MID
}

enum VisitationStatus {
  scheduled
  completed
  cancelled
}

enum ReminderStatus {
  pending
  sent
  failed
}
